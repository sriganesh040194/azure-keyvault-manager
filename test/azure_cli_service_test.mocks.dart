// Mocks generated by Mockito 5.4.6 from annotations
// in keyvault_ui/test/azure_cli_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i5;
import 'dart:io' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:process/src/interface/process_manager.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProcess_0 extends _i1.SmartFake implements _i2.Process {
  _FakeProcess_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIOSink_1 extends _i1.SmartFake implements _i2.IOSink {
  _FakeIOSink_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProcessManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockProcessManager extends _i1.Mock implements _i3.ProcessManager {
  MockProcessManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Process> start(
    List<Object>? command, {
    String? workingDirectory,
    Map<String, String>? environment,
    bool? includeParentEnvironment = true,
    bool? runInShell = false,
    _i2.ProcessStartMode? mode = _i2.ProcessStartMode.normal,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #start,
              [command],
              {
                #workingDirectory: workingDirectory,
                #environment: environment,
                #includeParentEnvironment: includeParentEnvironment,
                #runInShell: runInShell,
                #mode: mode,
              },
            ),
            returnValue: _i4.Future<_i2.Process>.value(
              _FakeProcess_0(
                this,
                Invocation.method(
                  #start,
                  [command],
                  {
                    #workingDirectory: workingDirectory,
                    #environment: environment,
                    #includeParentEnvironment: includeParentEnvironment,
                    #runInShell: runInShell,
                    #mode: mode,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Process>);

  @override
  _i4.Future<_i2.ProcessResult> run(
    List<Object>? command, {
    String? workingDirectory,
    Map<String, String>? environment,
    bool? includeParentEnvironment = true,
    bool? runInShell = false,
    _i5.Encoding? stdoutEncoding = const _i2.SystemEncoding(),
    _i5.Encoding? stderrEncoding = const _i2.SystemEncoding(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #run,
              [command],
              {
                #workingDirectory: workingDirectory,
                #environment: environment,
                #includeParentEnvironment: includeParentEnvironment,
                #runInShell: runInShell,
                #stdoutEncoding: stdoutEncoding,
                #stderrEncoding: stderrEncoding,
              },
            ),
            returnValue: _i4.Future<_i2.ProcessResult>.value(
              _i6.dummyValue<_i2.ProcessResult>(
                this,
                Invocation.method(
                  #run,
                  [command],
                  {
                    #workingDirectory: workingDirectory,
                    #environment: environment,
                    #includeParentEnvironment: includeParentEnvironment,
                    #runInShell: runInShell,
                    #stdoutEncoding: stdoutEncoding,
                    #stderrEncoding: stderrEncoding,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i2.ProcessResult>);

  @override
  _i2.ProcessResult runSync(
    List<Object>? command, {
    String? workingDirectory,
    Map<String, String>? environment,
    bool? includeParentEnvironment = true,
    bool? runInShell = false,
    _i5.Encoding? stdoutEncoding = const _i2.SystemEncoding(),
    _i5.Encoding? stderrEncoding = const _i2.SystemEncoding(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runSync,
              [command],
              {
                #workingDirectory: workingDirectory,
                #environment: environment,
                #includeParentEnvironment: includeParentEnvironment,
                #runInShell: runInShell,
                #stdoutEncoding: stdoutEncoding,
                #stderrEncoding: stderrEncoding,
              },
            ),
            returnValue: _i6.dummyValue<_i2.ProcessResult>(
              this,
              Invocation.method(
                #runSync,
                [command],
                {
                  #workingDirectory: workingDirectory,
                  #environment: environment,
                  #includeParentEnvironment: includeParentEnvironment,
                  #runInShell: runInShell,
                  #stdoutEncoding: stdoutEncoding,
                  #stderrEncoding: stderrEncoding,
                },
              ),
            ),
          )
          as _i2.ProcessResult);

  @override
  bool canRun(dynamic executable, {String? workingDirectory}) =>
      (super.noSuchMethod(
            Invocation.method(
              #canRun,
              [executable],
              {#workingDirectory: workingDirectory},
            ),
            returnValue: false,
          )
          as bool);

  @override
  bool killPid(
    int? pid, [
    _i2.ProcessSignal? signal = _i2.ProcessSignal.sigterm,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#killPid, [pid, signal]),
            returnValue: false,
          )
          as bool);
}

/// A class which mocks [Process].
///
/// See the documentation for Mockito's code generation for more information.
class MockProcess extends _i1.Mock implements _i2.Process {
  MockProcess() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int> get exitCode =>
      (super.noSuchMethod(
            Invocation.getter(#exitCode),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Stream<List<int>> get stdout =>
      (super.noSuchMethod(
            Invocation.getter(#stdout),
            returnValue: _i4.Stream<List<int>>.empty(),
          )
          as _i4.Stream<List<int>>);

  @override
  _i4.Stream<List<int>> get stderr =>
      (super.noSuchMethod(
            Invocation.getter(#stderr),
            returnValue: _i4.Stream<List<int>>.empty(),
          )
          as _i4.Stream<List<int>>);

  @override
  _i2.IOSink get stdin =>
      (super.noSuchMethod(
            Invocation.getter(#stdin),
            returnValue: _FakeIOSink_1(this, Invocation.getter(#stdin)),
          )
          as _i2.IOSink);

  @override
  int get pid =>
      (super.noSuchMethod(Invocation.getter(#pid), returnValue: 0) as int);

  @override
  bool kill([_i2.ProcessSignal? signal = _i2.ProcessSignal.sigterm]) =>
      (super.noSuchMethod(
            Invocation.method(#kill, [signal]),
            returnValue: false,
          )
          as bool);
}
